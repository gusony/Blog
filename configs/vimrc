"######## vim setting ###################################
"colorscheme location : ~/.vim/colors/
syntax enable "支援highlight
colorscheme tequila-sunrise
filetype plugin indent on
if &term == "screen"
    set t_Co=256
endif

set mouse=a                               "可以使用滑鼠 模式=auto
set ttymouse=sgr
set nu                                    "顯示行號
set backspace=indent,eol,start            "backspace可以用刪除縮排,換行字元,允許使用ctrl+w和ctrl+u來刪除獨立詞語
set completeopt=longest,menu
set laststatus=2                          "開啟vim狀態列
set ruler                                 "右下角顯示地行\列\文建位置%
set expandtab                             "tab 轉換成 space
set tabstop=4                             "tab 長度
set shiftwidth=4                          "設定shiftwidth 寬度
set cursorline                            "顯示游標所在的列
set smartcase                             "智慧大小寫搜尋
set hlsearch                              "highlight 搜尋結果
set cindent                               "智慧縮排
set ic
set foldmethod=syntax                     "程式碼摺疊
set foldnestmax=6                         "程式碼摺疊層數
 
"客製化狀態列
set statusline=[%{expand('%:p')}][%{strlen(&fenc)?&fenc:&enc},\ %{&ff},\ %{strlen(&filetype)?&filetype:'plain'}]%{FileSize()}%{IsBinary()}%=%c,%l/%L\ [%3p%%]
"打開vim自動執行
autocmd VimEnter *.c,*.h  TrinityToggleAll
"############# function ###################
function IsBinary()
if ( &binary == 0)
return ""
else
return "[Binary]"
endif
endfunction
 
function FileSize()
let bytes = getfsize(expand("%:p"))
if bytes <= 0
return "[Empty]"
endif
 
if bytes < 1024
return "[" . bytes . "B]"
elseif bytes < 1048576
return "[" . (bytes / 1024) . "KB]"
else
return "[" . (bytes / 1048576) . "MB]"
endif
endfunction
 
"######## tags ##################################
set tags=./tags,./TAGS,tags;~,TAGS;~ "告訴vim, tags在哪
 
"####### cscope ##################################
set cscopetag
set csto=0
set autochdir
 
if filereadable("cscope.out")
  cs add cscope.out
elseif $CSCOPE_DB != ""
  cs add $CSCOPE_DB
endif
 
set cscopeverbose
nmap zs :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap zg :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap zc :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap zt :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap ze :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap zf :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap zi :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap zd :cs find d <C-R>=expand("<cword>")<CR><CR>

function! DelTagOfFile(file)
    let fullpath = a:file
    let cwd = getcwd()
    let tagfilename = cwd . \"/tag"
    let f = substitute(fullpath, cwd . "/", "", "")
    let f = escape(f, './')
    let cmd = 'sed -i "/' . f . '/d" "' . tagfilename . '"'
    let resp = system(cmd)
endfunction

function! UpdateTags()
    let f = expand("%:p")
    let cwd = getcwd()
    let tagfilename = cwd . "/tags"
    let cmd = 'ctags -a -f ' . tagfilename . ' --c++finds=+p --fields=+iaS --extra=+q ' . '"' . f . '"'
    call DelTagOfFile(f)
    let resp = system(cmd)
endfunction
 
"######## taglist ########################################
nmap <F8> :TlistToggle<CR><CR>
let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1
set ut=100
 
 
"######## nerdtree ##########################################
nmap <F9> :NERDTreeFind<CR><CR>
let NERDTreeWinPos=1
 
 
"######## SrcExpl ##########################################
nmap <F10> :SrcExplToggle<CR>
let g:SrcExpl_pluginList = [
\ "__Tag_List__",
\ "_NERD_tree_",
\ "Source_Explorer"
\ ]
 
"################ trinity #################################
nmap <F7> :TrinityToggleAll<CR>
